{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMovie","event","keyCode","console","log","movie","target","value","endpoint","concat","fetch","then","response","json","data","Response","firstResult","Search","imdbLink","imdbID","setState","title","Title","year","Year","image","react_default","a","createElement","src","Poster","href","state","id","name","type","placeholder","onKeyDown","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA6EeA,qBAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,SAAW,SAACC,GAEV,GAAqB,KAAlBA,EAAMC,QAAe,CACtBC,QAAQC,IAAI,SACZ,IAAMC,EAAQJ,EAAMK,OAAOC,MAC3BJ,QAAQC,IAAIC,GACZ,IAEMG,EADY,kCAAAC,OADH,YAEc,MAAAA,OAASJ,GAEtCK,MAAMF,GACHG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAEJ,GAAqB,SAAlBA,EAAKC,SAAqB,CAC3BZ,QAAQC,IAAIU,GAEZ,IAAME,EAAcF,EAAKG,OAAO,GAChCd,QAAQC,IAAIY,GAEZ,IAAME,EAAQ,8BAAAT,OAAiCO,EAAYG,OAA7C,KAEd1B,EAAK2B,SAAU,CACbC,MAAOL,EAAYM,MACnBC,KAAMP,EAAYQ,KAClBC,MAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKb,EAAYc,SAC7BZ,SAAUQ,EAAAC,EAAAC,cAAA,KAAGG,KAAMb,GAAT,oBAGZf,QAAQC,IAAI,YACZX,EAAK2B,SAAS,CACZC,MAAO,8BAxCjB5B,EAAKuC,MAAQ,CACXX,MAAO,GACPE,KAAM,GACNE,MAAO,GACPP,SAAU,IANKzB,wEAkDjB,OACEiC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOK,GAAG,cACRP,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,QAAQC,KAAK,OAAOC,YAAY,oCAC5CC,UAAWzC,KAAKI,YAGlB0B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,WAASK,GAAG,eAAerC,KAAKoC,MAAMX,OACtCK,EAAAC,EAAAC,cAAA,WAASK,GAAG,cAAcrC,KAAKoC,MAAMT,MACrCG,EAAAC,EAAAC,cAAA,WAASK,GAAG,cAAcrC,KAAKoC,MAAMd,UACrCQ,EAAAC,EAAAC,cAAA,WAASK,GAAG,eAAerC,KAAKoC,MAAMP,iBAjEhCa,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.e1b42307.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      year: \"\",\n      image: \"\",\n      imdbLink: \"\"\n    }\n    //this.getMovie = this.getMovie.bind(this);\n  }\n\n  getMovie = (event) => {\n    //event.preventDefault();\n    if(event.keyCode === 13){\n      console.log(\"enter\");\n      const movie = event.target.value;\n      console.log(movie);\n      const apiKey = 'aa3aa587';\n      const rootEndpoint = `http://www.omdbapi.com/?apikey=${apiKey}`;\n      const endpoint = rootEndpoint + `&s=${movie}`;\n\n      fetch(endpoint)\n        .then(response => response.json())\n        .then(data => {\n\n          if(data.Response === 'True') {\n            console.log(data);\n\n            const firstResult = data.Search[0];\n            console.log(firstResult);\n\n            const imdbLink = `https://www.imdb.com/title/${firstResult.imdbID}/`;\n\n            this.setState ({\n              title: firstResult.Title,\n              year: firstResult.Year,\n              image: <img src={firstResult.Poster} />,\n              imdbLink: <a href={imdbLink}>IMDB Link</a>\n            })\n          } else {\n            console.log(\"no title\");\n            this.setState({\n              title: \"Cannot find the title\"\n            })\n          }\n        })\n    }\n  }\n\n  render() {\n    return(\n      <body>\n        <aside id=\"ui-control\">\n          <h2>Search for a movie</h2>\n          <input name=\"movie\" type=\"text\" placeholder=\"Type a movie name and press Enter\"\n          onKeyDown={this.getMovie} />\n        </aside>\n\n        <main>\n          <p>The movie information will appear below...</p>\n          <article>\n            <section id=\"movie-title\">{this.state.title}</section>\n            <section id=\"movie-year\">{this.state.year}</section>\n            <section id=\"movie-link\">{this.state.imdbLink}</section>\n            <section id=\"movie-image\">{this.state.image}</section>\n          </article>\n        </main>\n      </body>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}